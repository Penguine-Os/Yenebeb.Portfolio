@using System.Text.Json
<section   id="home">
    @if (hero is not null)
    {
        <img class="background" src="@(hero.Src)" alt="@(hero.Alt)"/>
    }
    <div style="position: absolute; top: 30%; ">
        <MudCard Outlined="true" Style="opacity: 0.9" Class="rounded-lg p-10">
                <MudCardContent>
                    <MudText Typo="Typo.h5" Color="Color.Secondary">I'm</MudText>
                    <MudText Typo="Typo.h2">@property?.Name</MudText>
                    <MudText Typo="Typo.h4" Color="Color.Secondary">
                        <span  id="typed-text" @ref="TypedTextElement"></span>
                    </MudText> 
                </MudCardContent>
                <MudCardActions>
                    <MudSpacer/>
                    <DownloadComponent Action="Download Cv" Http="Http" FilePath="File/CV_YENEBEB_DF.pdf" OutputFileName="Yenebeb-Cv.pdf"/>
                </MudCardActions>
            </MudCard>
    </div>
    <div style="position: absolute; bottom: 4rem; left: 50%;">
        <MudIconButton Href="#about" Target="_top"  Color="Color.Secondary" Size="Size.Large" Icon="@Icons.Material.Filled.KeyboardDoubleArrowDown"/>
      
    </div>
</section>

@code {

    [Inject]
    protected IJSRuntime Js { get; set; } = null!;

    [Parameter, EditorRequired]
    public required HttpClient Http { get; set; }

    [Parameter, EditorRequired]
    public required HeroImageService HeroImageService { get; set; }

    private SiteProperties? property;
    private HeroImage? hero;

    protected override async Task OnInitializedAsync()
    {
        property = await Http.GetFromJsonAsync<SiteProperties>("sample-data/siteproperties.json");
        hero = await HeroImageService.GetHeroAsync(img => img.Name is "home");
        
      
    }

    private ElementReference TypedTextElement;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var parameters = new
            {
                Arg1 = new List<string>
                {
                    ".Net",
                    "Full-Stack",
                    "Developer",
                    "Cross-Fit Enthusiast",
                    "Self-Reliant",
                    "Team-Player",
                    "Pizza Devourer"
                },
                Arg2 = TypedTextElement
            };

            try
            {
                await Js.InvokeVoidAsync("initializeTyped", parameters);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                 
            }
           
        }
    }
 
    private async Task DownloadCvHandler()
    {
        var fileStream = await Http.GetStreamAsync("Files/CV_YENEBEB_DF.pdf");
        var fileName = "CV_YENEBEB_DF.pdf";

        using var streamRef = new DotNetStreamReference(stream: fileStream);

        await Js.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }

}